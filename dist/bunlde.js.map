{"version":3,"file":"bunlde.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACNA;;;;;;;;;ACAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,aAAa;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,kFAAkF,qBAAqB;AACvG;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,qBAAqB;AACvG;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","sources":["webpack:///webpack/bootstrap","webpack:///webpack/runtime/make namespace object","webpack:///./style/index.scss","webpack:///./source/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// extracted by mini-css-extract-plugin\nexport {};","\"use strict\";\n/* eslint-disable require-jsdoc */\nwindow.addEventListener('load', function () {\n    var canvas = document.getElementById('canvas');\n    var ctx = canvas.getContext('2d');\n    var dino = document.getElementById('dino');\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    window.addEventListener('resize', function () {\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n    });\n    var Bar = /** @class */ (function () {\n        function Bar(x, y, width, height, color, index) {\n            this.x = x;\n            this.y = y;\n            this.width = width;\n            this.height = height;\n            this.color = color;\n            this.index = index;\n        }\n        Bar.prototype.update = function (micInput) {\n            var sound = micInput * 2000;\n            if (sound > this.height) {\n                this.height = sound;\n            }\n            else {\n                this.height -= this.height * 0.03;\n            }\n        };\n        Bar.prototype.draw = function (context) {\n            if (context) {\n                context.strokeStyle = this.color;\n                context.lineWidth = this.width;\n                context.save();\n                context.translate(canvas.width / 2 - 30, canvas.height / 2);\n                context.rotate(this.index * 0.03 + 180);\n                context.beginPath();\n                context.bezierCurveTo(this.x / 2, this.y / 2, this.height * -0.5 - 150, this.height + 50, this.x, this.y);\n                context.stroke();\n                if (this.index > 100) {\n                    context.beginPath();\n                    context.arc(this.x, this.y + 10 + this.height / 2 + this.height * 0.1, this.height * 0.1, 0, Math.PI * 2);\n                    context.stroke();\n                    context.beginPath();\n                    context.moveTo(this.x, this.y + 10);\n                    context.lineTo(this.x, this.y + 10 + this.height / 2);\n                    context.stroke();\n                }\n                context.restore();\n            }\n        };\n        return Bar;\n    }());\n    var Microphone = /** @class */ (function () {\n        function Microphone(fftSize) {\n            var _this = this;\n            this.initilalized = false;\n            this.initilalized = false;\n            navigator.mediaDevices\n                .getUserMedia({ audio: true })\n                .then(function (stream) {\n                _this.audioContext = new AudioContext();\n                _this.microphone = _this.audioContext.createMediaStreamSource(stream);\n                _this.analyser = _this.audioContext.createAnalyser();\n                _this.analyser.fftSize = fftSize;\n                var bufferLenght = _this.analyser.frequencyBinCount;\n                _this.dataArray = new Uint8Array(bufferLenght);\n                _this.microphone.connect(_this.analyser);\n                _this.initilalized = true;\n            })\n                .catch(function (error) {\n                alert(error.message);\n            });\n        }\n        Microphone.prototype.getSamples = function () {\n            if (this.analyser !== undefined && this.dataArray !== undefined) {\n                this.analyser.getByteTimeDomainData(this.dataArray);\n                var normalSamples = Array.from(this.dataArray).map(function (e) { return e / 128 - 1; });\n                return normalSamples;\n            }\n        };\n        Microphone.prototype.getVolume = function () {\n            if (this.analyser !== undefined && this.dataArray !== undefined) {\n                this.analyser.getByteTimeDomainData(this.dataArray);\n                var normalSamples = Array.from(this.dataArray).map(function (e) { return e / 128 - 1; });\n                var sum_1 = 0;\n                normalSamples.forEach(function (number) {\n                    sum_1 += Math.pow(number, 2);\n                });\n                var volume = Math.sqrt(sum_1 / normalSamples.length);\n                return volume;\n            }\n        };\n        return Microphone;\n    }());\n    var fftSize = 512;\n    var microphone = new Microphone(fftSize);\n    var bars = [];\n    var barWidth = canvas.width / (fftSize / 2);\n    function createBars() {\n        for (var i = 1; i < fftSize / 2; i++) {\n            bars.push(new Bar(0, i, 1, 50, \"hsl(\".concat(i, \",121%,31%)\"), i));\n        }\n    }\n    createBars();\n    var softVolume = 0;\n    function animate() {\n        if (microphone.initilalized === true) {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            var samples_1 = microphone.getSamples();\n            var volume = microphone.getVolume();\n            if (samples_1 !== undefined && bars && bars.length > 0) {\n                bars.forEach(function (bar, index) {\n                    bar.update(samples_1[index]);\n                    bar.draw(ctx);\n                });\n            }\n            ctx.restore();\n            if (volume) {\n                softVolume = softVolume * 0.9 + volume * 0.1;\n                if (dino) {\n                    dino.style.transform = \"translate(-45%, -50%) scale(\".concat(2.5 + softVolume, \",\").concat(2.5 + softVolume, \")\");\n                }\n            }\n        }\n        requestAnimationFrame(animate);\n    }\n    animate();\n});\n"],"names":[],"sourceRoot":""}